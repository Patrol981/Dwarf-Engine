uniform GlobalUbo {
  mat4 view;
  mat4 projection;
  vec3 cameraPosition;
  float fov;
  DirectionalLight directionalLight;
  int pointLightLength;
  int hasImportantEntity;
  vec3 importantEntityPosition;
  vec3 importantEntityDirection;
  vec3 fog;
  int useFog;
  vec4 fogColor;
  vec2 screenSize;
  float hatchScale;
} ubo;

vec2 worldToScreenPos(vec3 worldPos, mat4 mvp) {
  vec4 clipSpacePos = mvp * vec4(worldPos, 1.0);
  vec3 ndc = clipSpacePos.xyz / clipSpacePos.w;
  vec2 screenPos = ndc.xy * 0.5 + 0.5;

  return screenPos;
}
